configfile: "config.yaml"

if config["use_azure"]:
    from snakemake.remote.AzBlob import RemoteProvider as AzureRemoteProvider
    from os import getenv
    AS = AzureRemoteProvider() # assumes env vars AZ_BLOB_ACCOUNT_URL and possibly AZ_BLOB_CREDENTIAL are set
    container_name = getenv("AZ_BLOB_PREFIX", "")
    species, samples = AS.glob_wildcards(container_name+"/"+config["samples_dir"]+"/{species}/{samples}.fna")
else:
    species, samples = glob_wildcards(config["samples_dir"]+"/{species}/{samples}.fna")

rule all:
    input:
        "results/args_table.csv"

rule download_databases:
    output:
        "databases.gz",
    shell:
        """
        git clone https://bitbucket.org/genomicepidemiology/resfinder_db/
        tar -czvf {output} resfinder_db
        """

rule compute_args:
    input:
        fasta=config["samples_dir"]+"/{specie_id}/{sample}.fna",
        databases_folder="databases.gz"
    output:
        temp("results/args/{specie_id}/{sample}.tar.gz")
    conda:
        "envs/resfinder.yaml"
    shell:
        """
        tar -xzvf {input.databases_folder}
        python -m resfinder -o results/args/{wildcards.specie_id}/{wildcards.sample} \
            --min_cov 0.6 --threshold 0.8 --acquired -ifa {input.fasta} \
            -db_res resfinder_db
        tar -czvf {output} results/args/{wildcards.specie_id}/{wildcards.sample}
        """

rule parse_results:
    input:
        results_dir="results/args/{specie_id}/{sample}.tar.gz"
    output:
       temp("results/args_parsed/{specie_id}/{sample}.json")
    conda:
        "envs/parsing.yaml"
    shell:
        """
        tar -xzvf {input.results_dir}
        python scripts/resfinder_parser.py \
        --results-dir results/args/{wildcards.specie_id}/{wildcards.sample} \
        --output {output}
        """

rule create_table:
    input:
        expand("results/args_parsed/{specie_id}/{sample}.json",
               zip, specie_id=species, sample=samples)
    output:
        "results/args_table.csv"
    conda:
        "envs/parsing.yaml"
    shell:
        "python scripts/create_table.py {input} --output {output}"
